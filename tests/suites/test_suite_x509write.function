/* BEGIN_HEADER */
#include <polarssl/x509write.h>
#include <polarssl/x509.h>
#include <polarssl/pem.h>
#include <polarssl/oid.h>
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:POLARSSL_X509_WRITE_C:POLARSSL_BIGNUM_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void x509_cert_req_check( char *key_file, int md_type,
                          char *cert_req_check_file )
{
    rsa_context rsa;
    pem_context pem;
    x509_cert_req req;
    unsigned char *c;
    unsigned char buf[4000];
    unsigned char check_buf[4000];
    int ret;
    size_t olen = 2000;
    FILE *f;
    char *subject_name = "CN=PolarSSL Server 1,O=PolarSSL,C=NL";

    memset( &rsa, 0, sizeof(rsa_context) );
    ret = x509parse_keyfile_rsa( &rsa, key_file, NULL );
    TEST_ASSERT( ret == 0 );
    if( ret != 0 )
        return;

    x509cert_req_init( &req );
    x509cert_req_set_md_alg( &req, md_type );
    x509cert_req_set_rsa_key( &req, &rsa );
    TEST_ASSERT( x509cert_req_set_subject_name( &req, subject_name ) == 0 );

    ret = x509_write_cert_req( &req, buf, 4000 );
    TEST_ASSERT( ret >= 0 );

    c = buf + 3999 - ret;

    f = fopen( cert_req_check_file, "r" );
    TEST_ASSERT( f != NULL );
    fread( check_buf, 1, 4000, f );
    fclose( f );

    pem_init( &pem );
    pem_read_buffer( &pem, "-----BEGIN CERTIFICATE REQUEST-----", "-----END CERTIFICATE REQUEST-----", check_buf, NULL, 0, &olen );

    TEST_ASSERT( memcmp( c, pem.buf, pem.buflen ) == 0 );
    TEST_ASSERT( pem.buflen == (size_t) ret );

    x509cert_req_free( &req );
    rsa_free( &rsa );
    pem_free( &pem );
}
/* END_CASE */
